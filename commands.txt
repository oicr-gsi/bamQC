## Commands
This section lists command(s) run by bamQC lite workflow

* Running bamQC lite

bamQC lite gets most of it's metrics from external tools (except the ones it generates by running CIGAR analysis on downsampled data). 
It has fewer steps then the original bamQC but produces almost exact results.

### Run samstats on unaltered inputs

```
    samtools stats ~{bamFile} -r  ~{referenceFile} > ~{filePrefix}.stats
```

### Run mosdepth to get coverage metrics

```
    set -eo pipefail
    # ensure BAM file and index are symlinked to working directory
    ln -s ~{bamFile}
    ln -s ~{bamIndex}
    # run mosdepth
    MOSDEPTH_PRECISION=8 mosdepth -x -n ~{"--by " + targetBed} ~{additionalParameters} -t 3 ~{prefix} ~{bamFileName}
```

### Extract coverage histogram

This step creates a lane-level coverage hitogram for each of the lane-level inputs

```
        python3 ~{coverageHistogram} -s ~{summary} -g ~{globalDist} -o ~{outFileName}
```

### Merge windowed coverage, generate coverage histogram

Windowed coverage is used to create a call-ready coverage histogram. mosDepth produces windowed coverage in a format 
suitable for merging if we have multiple lane-level inputs

```
    python3 ~{coverageMerge} -f ~{sep="," coverageFiles} \
                             -o ~{outFileName} 
```

### Duplicate read marking with samblaster, lane-level mode

This task runs on a lane-level BAM and produces Duplicate Read metrics later injected into the final report (in lane-level mode)

```
    set -euxo pipefail
    samtools head -n ~{downsampleToReads} ~{bamFile} | \
    samtools view -h -F 2308 - | \
    samtools sort -n - | \
    samtools fixmate -m -O SAM - - | \
    samblaster --ignoreUnmated ~{additionalParameters} --output /dev/null 2> >(tee "~{filePrefix}.markDuplicates.txt")
```

### Duplicate read marking with samblaster, call-ready mode

This task accepts multiple (downsampled) BAM files and merges them on the fly, piping the results into samblaster

```
    set -euxo pipefail
    samtools cat ~{sep=" " bamFiles} | \
    samtools view -h -F 2308 - | \
    samtools sort -n - | \
    samtools fixmate -m -O SAM - - | \
    samblaster --ignoreUnmated ~{additionalParameters} --output /dev/null 2> >(tee "~{outputFileNamePrefix}.markDuplicates.txt")
```

### For targeted sequencing, count reads on target with bedtools

This runs only if we have a target .bed file supplied (targeted sequencing mode)

```
    bedtools intersect -a ~{inputBam} -b ~{targetBed} -u | samtools view -c | perl -pe 'chomp'
```

### Count unique reads on downsampled data (needed for CIGAR metrics)

CIGAR metrics are generated using downsampled bam, this step uses the same rate of downsampling

```
    samtools head -n ~{downsampleToReads} ~{inputBam} | samtools view -F 256 -q 30 -c | perl -pe 'chomp'
```

### Run bamQC lite which aggregates metrics into lane-level json report

This creates a lane-level report. In lane-level mode this is going to be the final output from the workflow.
In call-ready mode these reports will be merged and the final merged metrics provisioned.

```
        set -euxo pipefail
        python3 ~{bamQClite} ~{"-b " + bamFile} \
        -s ~{samstatsFile} \
        -d ~{markDuplicatesStats} \
        -c ~{histogram} \
        -m ~{metadataJson} \
        -w ~{workflowVersion} ~{"-tf " + targetBed} \
        -r ~{referenceFileName} ~{"-S " + downsampleToReads} \
        -o ~{outputFileName} \
        -t ~{mosdepthSummary} ~{"-u " + uniqueReads} ~{"-ot " + readsOnTarget} 
```

### Run merger script which will combine reports into call-ready report if there are multiple lanes

This step will return lane-level report (exact copy of it's input) if there is one lane, but will
combine metrics into call-ready report if there are multiple lanes

```
        set -euxo pipefail
        python3 ~{bamQCmerger} -l ~{sep="," inputs} ~{"-d " + mergedDupmarkingData} ~{"-t " + mergedCoverageData} -o ~{outputFileName}
```
